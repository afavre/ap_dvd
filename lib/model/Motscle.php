<?php


/**
 * Skeleton subclass for representing a row from the 'motscle' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Mon Feb  7 20:41:55 2011
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Motscle extends BaseMotscle {

	/**
	 * Initializes internal state of Video object.
	 * @see        parent::__construct()
	 */
	public function __construct(){
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

	public function __toString(){
            return sprintf('%s', $this->getMot());
    }
	
	public function save(PropelPDO $con = null){
			
		if (is_null($con))
		{
			$con = Propel::getConnection(MotsclePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try
		{
		  $ret = parent::save($con);
		  $this->updateLuceneIndex();
		  $con->commit();
		  return $ret;
		}
		catch (Exception $e)
		{
		  $con->rollBack();
		  throw $e;
		}

	  }
	  
	  public function delete(PropelPDO $con = null)
{
  $index = MotsclePeer::getLuceneIndex();
 
  foreach ($index->find('pk:'.$this->getId()) as $hit)
  {
    $index->delete($hit->id);
  }
 
  return parent::delete($con);
}
	
    public function getAllVideos($nb=0){
		foreach($this->getMotsclevideos() as $ $i => $video){
			if($i<$nb || $nb==0){
				$videos[]=$video->getVideo();
			}
		}
		return $videos;
    }
	
	public function getVideos($nb=0){
		$videos1 = $this->getAllVideos();
		$crit=new Criteria();
		
		$videos = VideoPeer::doSelect($crit);

		foreach($videos as $i => $video){
				$videos2[]=$video->getId();
		}
		foreach($videos1 as $i => $video){
			if(in_array($video->getId(),$videos2)){
				$videos3[]=$video;
			}
		}
		return $videos3;
    }
	
	 public function updateLuceneIndex()
	{
	  $index = MotsclePeer::getLuceneIndex();
	 
	  // remove existing entries
	  foreach ($index->find('pk:'.$this->getId()) as $hit)
	  {
		$index->delete($hit->id);
	  }
	 
	  $doc = new Zend_Search_Lucene_Document();
	 
	  // store job primary key to identify it in the search results
	  $doc->addField(Zend_Search_Lucene_Field::Keyword('pk', $this->getId()));
	 
	  // index job fields
	  $doc->addField(Zend_Search_Lucene_Field::UnStored('mot', VideoPeer::clean($this->getMot()), 'utf-8'));
	  

	 
	  // add job to the index
	  $index->addDocument($doc);
	  $index->commit();
	}
	
	
	
	public function setMot($v){
		$clean=VideoPeer::clean($v);
		$this->setMotClean($clean);
		return parent::setMot($v);
	}

} // Motscle
