<?php


/**
 * This class defines the structure of the 'video' table.
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Mon Mar 19 16:27:21 2012
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class VideoTableMap extends TableMap {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.VideoTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
	  // attributes
		$this->setName('video');
		$this->setPhpName('Video');
		$this->setClassname('Video');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		// columns
		$this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
		$this->addColumn('TYPE', 'Type', 'VARCHAR', true, 'film','spectacle','episode', null);
		$this->addForeignKey('SAISON_ID', 'SaisonId', 'INTEGER', 'saison', 'ID', false, null, null);
		$this->addColumn('NUMERO', 'Numero', 'INTEGER', false, null, null);
		$this->addForeignKey('SAGA_ID', 'SagaId', 'INTEGER', 'saga', 'ID', false, null, null);
		$this->addForeignKey('REALISATEUR_ID', 'RealisateurId', 'INTEGER', 'personne', 'ID', true, null, null);
		$this->addColumn('TITRE', 'Titre', 'VARCHAR', true, 255, null);
		$this->addColumn('SOUS_TITRE', 'SousTitre', 'VARCHAR', false, 255, null);
		$this->addColumn('TITRE_ORIGINAL', 'TitreOriginal', 'VARCHAR', false, 255, null);
		$this->addColumn('TITRE_CLEAN', 'TitreClean', 'VARCHAR', true, 255, null);
		$this->addColumn('AVERTISSEMENT', 'Avertissement', 'LONGVARCHAR', false, null, null);
		$this->addColumn('RESUME', 'Resume', 'LONGVARCHAR', false, null, null);
		$this->addColumn('IMAGE', 'Image', 'VARCHAR', false, 255, null);
		$this->addColumn('BANDE_ANNONCE', 'BandeAnnonce', 'VARCHAR', false, 255, null);
		$this->addColumn('ANNEE_SORTIE', 'AnneeSortie', 'INTEGER', false, null, null);
		$this->addColumn('DUREE', 'Duree', 'INTEGER', false, null, null);
		$this->addForeignKey('QUALITE_ID', 'QualiteId', 'INTEGER', 'qualite', 'ID', true, null, null);
		$this->addForeignKey('VERSION_ID', 'VersionId', 'INTEGER', 'version', 'ID', false, null, null);
		$this->addColumn('NB_VISITE', 'NbVisite', 'INTEGER', false, null, null);
		$this->addColumn('IS_PUBLIC', 'IsPublic', 'BOOLEAN', true, null, true);
		$this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
		$this->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
    $this->addRelation('Saison', 'Saison', RelationMap::MANY_TO_ONE, array('saison_id' => 'id', ), null, null);
    $this->addRelation('Saga', 'Saga', RelationMap::MANY_TO_ONE, array('saga_id' => 'id', ), null, null);
    $this->addRelation('Personne', 'Personne', RelationMap::MANY_TO_ONE, array('realisateur_id' => 'id', ), null, null);
    $this->addRelation('Qualite', 'Qualite', RelationMap::MANY_TO_ONE, array('qualite_id' => 'id', ), null, null);
    $this->addRelation('Version', 'Version', RelationMap::MANY_TO_ONE, array('version_id' => 'id', ), null, null);
    $this->addRelation('Notevideo', 'Notevideo', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), null, null);
    $this->addRelation('Acteurvideo', 'Acteurvideo', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), 'CASCADE', null);
    $this->addRelation('Categorievideo', 'Categorievideo', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), 'CASCADE', null);
    $this->addRelation('Motsclevideo', 'Motsclevideo', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), 'CASCADE', null);
    $this->addRelation('Notevideoadmin', 'Notevideoadmin', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), null, null);
    $this->addRelation('Videoproprietaire', 'Videoproprietaire', RelationMap::ONE_TO_MANY, array('id' => 'video_id', ), 'CASCADE', null);
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
			'symfony_timestampable' => array('create_column' => 'created_at', 'update_column' => 'updated_at', ),
		);
	} // getBehaviors()

} // VideoTableMap
