<?php

/**
 * Base class that represents a row from the 'video' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Mon Mar 19 16:27:21 2012
 *
 * @package    lib.model.om
 */
abstract class BaseVideo extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        VideoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the type field.
	 * @var        string
	 */
	protected $type;

	/**
	 * The value for the saison_id field.
	 * @var        int
	 */
	protected $saison_id;

	/**
	 * The value for the numero field.
	 * @var        int
	 */
	protected $numero;

	/**
	 * The value for the saga_id field.
	 * @var        int
	 */
	protected $saga_id;

	/**
	 * The value for the realisateur_id field.
	 * @var        int
	 */
	protected $realisateur_id;

	/**
	 * The value for the titre field.
	 * @var        string
	 */
	protected $titre;

	/**
	 * The value for the sous_titre field.
	 * @var        string
	 */
	protected $sous_titre;

	/**
	 * The value for the titre_original field.
	 * @var        string
	 */
	protected $titre_original;

	/**
	 * The value for the titre_clean field.
	 * @var        string
	 */
	protected $titre_clean;

	/**
	 * The value for the avertissement field.
	 * @var        string
	 */
	protected $avertissement;

	/**
	 * The value for the resume field.
	 * @var        string
	 */
	protected $resume;

	/**
	 * The value for the image field.
	 * @var        string
	 */
	protected $image;

	/**
	 * The value for the bande_annonce field.
	 * @var        string
	 */
	protected $bande_annonce;

	/**
	 * The value for the annee_sortie field.
	 * @var        int
	 */
	protected $annee_sortie;

	/**
	 * The value for the duree field.
	 * @var        int
	 */
	protected $duree;

	/**
	 * The value for the qualite_id field.
	 * @var        int
	 */
	protected $qualite_id;

	/**
	 * The value for the version_id field.
	 * @var        int
	 */
	protected $version_id;

	/**
	 * The value for the nb_visite field.
	 * @var        int
	 */
	protected $nb_visite;

	/**
	 * The value for the is_public field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_public;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        Saison
	 */
	protected $aSaison;

	/**
	 * @var        Saga
	 */
	protected $aSaga;

	/**
	 * @var        Personne
	 */
	protected $aPersonne;

	/**
	 * @var        Qualite
	 */
	protected $aQualite;

	/**
	 * @var        Version
	 */
	protected $aVersion;

	/**
	 * @var        array Notevideo[] Collection to store aggregation of Notevideo objects.
	 */
	protected $collNotevideos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotevideos.
	 */
	private $lastNotevideoCriteria = null;

	/**
	 * @var        array Acteurvideo[] Collection to store aggregation of Acteurvideo objects.
	 */
	protected $collActeurvideos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActeurvideos.
	 */
	private $lastActeurvideoCriteria = null;

	/**
	 * @var        array Categorievideo[] Collection to store aggregation of Categorievideo objects.
	 */
	protected $collCategorievideos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCategorievideos.
	 */
	private $lastCategorievideoCriteria = null;

	/**
	 * @var        array Motsclevideo[] Collection to store aggregation of Motsclevideo objects.
	 */
	protected $collMotsclevideos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMotsclevideos.
	 */
	private $lastMotsclevideoCriteria = null;

	/**
	 * @var        array Notevideoadmin[] Collection to store aggregation of Notevideoadmin objects.
	 */
	protected $collNotevideoadmins;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotevideoadmins.
	 */
	private $lastNotevideoadminCriteria = null;

	/**
	 * @var        array Videoproprietaire[] Collection to store aggregation of Videoproprietaire objects.
	 */
	protected $collVideoproprietaires;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVideoproprietaires.
	 */
	private $lastVideoproprietaireCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'VideoPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_public = true;
	}

	/**
	 * Initializes internal state of BaseVideo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [type] column value.
	 * 
	 * @return     string
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Get the [saison_id] column value.
	 * 
	 * @return     int
	 */
	public function getSaisonId()
	{
		return $this->saison_id;
	}

	/**
	 * Get the [numero] column value.
	 * 
	 * @return     int
	 */
	public function getNumero()
	{
		return $this->numero;
	}

	/**
	 * Get the [saga_id] column value.
	 * 
	 * @return     int
	 */
	public function getSagaId()
	{
		return $this->saga_id;
	}

	/**
	 * Get the [realisateur_id] column value.
	 * 
	 * @return     int
	 */
	public function getRealisateurId()
	{
		return $this->realisateur_id;
	}

	/**
	 * Get the [titre] column value.
	 * 
	 * @return     string
	 */
	public function getTitre()
	{
		return $this->titre;
	}

	/**
	 * Get the [sous_titre] column value.
	 * 
	 * @return     string
	 */
	public function getSousTitre()
	{
		return $this->sous_titre;
	}

	/**
	 * Get the [titre_original] column value.
	 * 
	 * @return     string
	 */
	public function getTitreOriginal()
	{
		return $this->titre_original;
	}

	/**
	 * Get the [titre_clean] column value.
	 * 
	 * @return     string
	 */
	public function getTitreClean()
	{
		return $this->titre_clean;
	}

	/**
	 * Get the [avertissement] column value.
	 * 
	 * @return     string
	 */
	public function getAvertissement()
	{
		return $this->avertissement;
	}

	/**
	 * Get the [resume] column value.
	 * 
	 * @return     string
	 */
	public function getResume()
	{
		return $this->resume;
	}

	/**
	 * Get the [image] column value.
	 * 
	 * @return     string
	 */
	public function getImage()
	{
		return $this->image;
	}

	/**
	 * Get the [bande_annonce] column value.
	 * 
	 * @return     string
	 */
	public function getBandeAnnonce()
	{
		return $this->bande_annonce;
	}

	/**
	 * Get the [annee_sortie] column value.
	 * 
	 * @return     int
	 */
	public function getAnneeSortie()
	{
		return $this->annee_sortie;
	}

	/**
	 * Get the [duree] column value.
	 * 
	 * @return     int
	 */
	public function getDuree()
	{
		return $this->duree;
	}

	/**
	 * Get the [qualite_id] column value.
	 * 
	 * @return     int
	 */
	public function getQualiteId()
	{
		return $this->qualite_id;
	}

	/**
	 * Get the [version_id] column value.
	 * 
	 * @return     int
	 */
	public function getVersionId()
	{
		return $this->version_id;
	}

	/**
	 * Get the [nb_visite] column value.
	 * 
	 * @return     int
	 */
	public function getNbVisite()
	{
		return $this->nb_visite;
	}

	/**
	 * Get the [is_public] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPublic()
	{
		return $this->is_public;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = VideoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [type] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->type !== $v) {
			$this->type = $v;
			$this->modifiedColumns[] = VideoPeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Set the value of [saison_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setSaisonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saison_id !== $v) {
			$this->saison_id = $v;
			$this->modifiedColumns[] = VideoPeer::SAISON_ID;
		}

		if ($this->aSaison !== null && $this->aSaison->getId() !== $v) {
			$this->aSaison = null;
		}

		return $this;
	} // setSaisonId()

	/**
	 * Set the value of [numero] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setNumero($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numero !== $v) {
			$this->numero = $v;
			$this->modifiedColumns[] = VideoPeer::NUMERO;
		}

		return $this;
	} // setNumero()

	/**
	 * Set the value of [saga_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setSagaId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->saga_id !== $v) {
			$this->saga_id = $v;
			$this->modifiedColumns[] = VideoPeer::SAGA_ID;
		}

		if ($this->aSaga !== null && $this->aSaga->getId() !== $v) {
			$this->aSaga = null;
		}

		return $this;
	} // setSagaId()

	/**
	 * Set the value of [realisateur_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setRealisateurId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->realisateur_id !== $v) {
			$this->realisateur_id = $v;
			$this->modifiedColumns[] = VideoPeer::REALISATEUR_ID;
		}

		if ($this->aPersonne !== null && $this->aPersonne->getId() !== $v) {
			$this->aPersonne = null;
		}

		return $this;
	} // setRealisateurId()

	/**
	 * Set the value of [titre] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setTitre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titre !== $v) {
			$this->titre = $v;
			$this->modifiedColumns[] = VideoPeer::TITRE;
		}

		return $this;
	} // setTitre()

	/**
	 * Set the value of [sous_titre] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setSousTitre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sous_titre !== $v) {
			$this->sous_titre = $v;
			$this->modifiedColumns[] = VideoPeer::SOUS_TITRE;
		}

		return $this;
	} // setSousTitre()

	/**
	 * Set the value of [titre_original] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setTitreOriginal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titre_original !== $v) {
			$this->titre_original = $v;
			$this->modifiedColumns[] = VideoPeer::TITRE_ORIGINAL;
		}

		return $this;
	} // setTitreOriginal()

	/**
	 * Set the value of [titre_clean] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setTitreClean($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->titre_clean !== $v) {
			$this->titre_clean = $v;
			$this->modifiedColumns[] = VideoPeer::TITRE_CLEAN;
		}

		return $this;
	} // setTitreClean()

	/**
	 * Set the value of [avertissement] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setAvertissement($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->avertissement !== $v) {
			$this->avertissement = $v;
			$this->modifiedColumns[] = VideoPeer::AVERTISSEMENT;
		}

		return $this;
	} // setAvertissement()

	/**
	 * Set the value of [resume] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setResume($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->resume !== $v) {
			$this->resume = $v;
			$this->modifiedColumns[] = VideoPeer::RESUME;
		}

		return $this;
	} // setResume()

	/**
	 * Set the value of [image] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setImage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->image !== $v) {
			$this->image = $v;
			$this->modifiedColumns[] = VideoPeer::IMAGE;
		}

		return $this;
	} // setImage()

	/**
	 * Set the value of [bande_annonce] column.
	 * 
	 * @param      string $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setBandeAnnonce($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bande_annonce !== $v) {
			$this->bande_annonce = $v;
			$this->modifiedColumns[] = VideoPeer::BANDE_ANNONCE;
		}

		return $this;
	} // setBandeAnnonce()

	/**
	 * Set the value of [annee_sortie] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setAnneeSortie($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->annee_sortie !== $v) {
			$this->annee_sortie = $v;
			$this->modifiedColumns[] = VideoPeer::ANNEE_SORTIE;
		}

		return $this;
	} // setAnneeSortie()

	/**
	 * Set the value of [duree] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setDuree($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->duree !== $v) {
			$this->duree = $v;
			$this->modifiedColumns[] = VideoPeer::DUREE;
		}

		return $this;
	} // setDuree()

	/**
	 * Set the value of [qualite_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setQualiteId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->qualite_id !== $v) {
			$this->qualite_id = $v;
			$this->modifiedColumns[] = VideoPeer::QUALITE_ID;
		}

		if ($this->aQualite !== null && $this->aQualite->getId() !== $v) {
			$this->aQualite = null;
		}

		return $this;
	} // setQualiteId()

	/**
	 * Set the value of [version_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setVersionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->version_id !== $v) {
			$this->version_id = $v;
			$this->modifiedColumns[] = VideoPeer::VERSION_ID;
		}

		if ($this->aVersion !== null && $this->aVersion->getId() !== $v) {
			$this->aVersion = null;
		}

		return $this;
	} // setVersionId()

	/**
	 * Set the value of [nb_visite] column.
	 * 
	 * @param      int $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setNbVisite($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nb_visite !== $v) {
			$this->nb_visite = $v;
			$this->modifiedColumns[] = VideoPeer::NB_VISITE;
		}

		return $this;
	} // setNbVisite()

	/**
	 * Set the value of [is_public] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Video The current object (for fluent API support)
	 */
	public function setIsPublic($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_public !== $v || $this->isNew()) {
			$this->is_public = $v;
			$this->modifiedColumns[] = VideoPeer::IS_PUBLIC;
		}

		return $this;
	} // setIsPublic()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Video The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = VideoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Video The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = VideoPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_public !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->type = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->saison_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->numero = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->saga_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->realisateur_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->titre = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->sous_titre = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->titre_original = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->titre_clean = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->avertissement = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->resume = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->image = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->bande_annonce = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->annee_sortie = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->duree = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->qualite_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->version_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->nb_visite = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->is_public = ($row[$startcol + 19] !== null) ? (boolean) $row[$startcol + 19] : null;
			$this->created_at = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->updated_at = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = VideoPeer::NUM_COLUMNS - VideoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Video object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aSaison !== null && $this->saison_id !== $this->aSaison->getId()) {
			$this->aSaison = null;
		}
		if ($this->aSaga !== null && $this->saga_id !== $this->aSaga->getId()) {
			$this->aSaga = null;
		}
		if ($this->aPersonne !== null && $this->realisateur_id !== $this->aPersonne->getId()) {
			$this->aPersonne = null;
		}
		if ($this->aQualite !== null && $this->qualite_id !== $this->aQualite->getId()) {
			$this->aQualite = null;
		}
		if ($this->aVersion !== null && $this->version_id !== $this->aVersion->getId()) {
			$this->aVersion = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VideoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = VideoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aSaison = null;
			$this->aSaga = null;
			$this->aPersonne = null;
			$this->aQualite = null;
			$this->aVersion = null;
			$this->collNotevideos = null;
			$this->lastNotevideoCriteria = null;

			$this->collActeurvideos = null;
			$this->lastActeurvideoCriteria = null;

			$this->collCategorievideos = null;
			$this->lastCategorievideoCriteria = null;

			$this->collMotsclevideos = null;
			$this->lastMotsclevideoCriteria = null;

			$this->collNotevideoadmins = null;
			$this->lastNotevideoadminCriteria = null;

			$this->collVideoproprietaires = null;
			$this->lastVideoproprietaireCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VideoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseVideo:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				VideoPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseVideo:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VideoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseVideo:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(VideoPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(VideoPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseVideo:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				VideoPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSaison !== null) {
				if ($this->aSaison->isModified() || $this->aSaison->isNew()) {
					$affectedRows += $this->aSaison->save($con);
				}
				$this->setSaison($this->aSaison);
			}

			if ($this->aSaga !== null) {
				if ($this->aSaga->isModified() || $this->aSaga->isNew()) {
					$affectedRows += $this->aSaga->save($con);
				}
				$this->setSaga($this->aSaga);
			}

			if ($this->aPersonne !== null) {
				if ($this->aPersonne->isModified() || $this->aPersonne->isNew()) {
					$affectedRows += $this->aPersonne->save($con);
				}
				$this->setPersonne($this->aPersonne);
			}

			if ($this->aQualite !== null) {
				if ($this->aQualite->isModified() || $this->aQualite->isNew()) {
					$affectedRows += $this->aQualite->save($con);
				}
				$this->setQualite($this->aQualite);
			}

			if ($this->aVersion !== null) {
				if ($this->aVersion->isModified() || $this->aVersion->isNew()) {
					$affectedRows += $this->aVersion->save($con);
				}
				$this->setVersion($this->aVersion);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = VideoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = VideoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += VideoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collNotevideos !== null) {
				foreach ($this->collNotevideos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActeurvideos !== null) {
				foreach ($this->collActeurvideos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCategorievideos !== null) {
				foreach ($this->collCategorievideos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMotsclevideos !== null) {
				foreach ($this->collMotsclevideos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotevideoadmins !== null) {
				foreach ($this->collNotevideoadmins as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVideoproprietaires !== null) {
				foreach ($this->collVideoproprietaires as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSaison !== null) {
				if (!$this->aSaison->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSaison->getValidationFailures());
				}
			}

			if ($this->aSaga !== null) {
				if (!$this->aSaga->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSaga->getValidationFailures());
				}
			}

			if ($this->aPersonne !== null) {
				if (!$this->aPersonne->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPersonne->getValidationFailures());
				}
			}

			if ($this->aQualite !== null) {
				if (!$this->aQualite->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aQualite->getValidationFailures());
				}
			}

			if ($this->aVersion !== null) {
				if (!$this->aVersion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVersion->getValidationFailures());
				}
			}


			if (($retval = VideoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collNotevideos !== null) {
					foreach ($this->collNotevideos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActeurvideos !== null) {
					foreach ($this->collActeurvideos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCategorievideos !== null) {
					foreach ($this->collCategorievideos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMotsclevideos !== null) {
					foreach ($this->collMotsclevideos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotevideoadmins !== null) {
					foreach ($this->collNotevideoadmins as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVideoproprietaires !== null) {
					foreach ($this->collVideoproprietaires as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VideoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getType();
				break;
			case 2:
				return $this->getSaisonId();
				break;
			case 3:
				return $this->getNumero();
				break;
			case 4:
				return $this->getSagaId();
				break;
			case 5:
				return $this->getRealisateurId();
				break;
			case 6:
				return $this->getTitre();
				break;
			case 7:
				return $this->getSousTitre();
				break;
			case 8:
				return $this->getTitreOriginal();
				break;
			case 9:
				return $this->getTitreClean();
				break;
			case 10:
				return $this->getAvertissement();
				break;
			case 11:
				return $this->getResume();
				break;
			case 12:
				return $this->getImage();
				break;
			case 13:
				return $this->getBandeAnnonce();
				break;
			case 14:
				return $this->getAnneeSortie();
				break;
			case 15:
				return $this->getDuree();
				break;
			case 16:
				return $this->getQualiteId();
				break;
			case 17:
				return $this->getVersionId();
				break;
			case 18:
				return $this->getNbVisite();
				break;
			case 19:
				return $this->getIsPublic();
				break;
			case 20:
				return $this->getCreatedAt();
				break;
			case 21:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = VideoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getType(),
			$keys[2] => $this->getSaisonId(),
			$keys[3] => $this->getNumero(),
			$keys[4] => $this->getSagaId(),
			$keys[5] => $this->getRealisateurId(),
			$keys[6] => $this->getTitre(),
			$keys[7] => $this->getSousTitre(),
			$keys[8] => $this->getTitreOriginal(),
			$keys[9] => $this->getTitreClean(),
			$keys[10] => $this->getAvertissement(),
			$keys[11] => $this->getResume(),
			$keys[12] => $this->getImage(),
			$keys[13] => $this->getBandeAnnonce(),
			$keys[14] => $this->getAnneeSortie(),
			$keys[15] => $this->getDuree(),
			$keys[16] => $this->getQualiteId(),
			$keys[17] => $this->getVersionId(),
			$keys[18] => $this->getNbVisite(),
			$keys[19] => $this->getIsPublic(),
			$keys[20] => $this->getCreatedAt(),
			$keys[21] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VideoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setType($value);
				break;
			case 2:
				$this->setSaisonId($value);
				break;
			case 3:
				$this->setNumero($value);
				break;
			case 4:
				$this->setSagaId($value);
				break;
			case 5:
				$this->setRealisateurId($value);
				break;
			case 6:
				$this->setTitre($value);
				break;
			case 7:
				$this->setSousTitre($value);
				break;
			case 8:
				$this->setTitreOriginal($value);
				break;
			case 9:
				$this->setTitreClean($value);
				break;
			case 10:
				$this->setAvertissement($value);
				break;
			case 11:
				$this->setResume($value);
				break;
			case 12:
				$this->setImage($value);
				break;
			case 13:
				$this->setBandeAnnonce($value);
				break;
			case 14:
				$this->setAnneeSortie($value);
				break;
			case 15:
				$this->setDuree($value);
				break;
			case 16:
				$this->setQualiteId($value);
				break;
			case 17:
				$this->setVersionId($value);
				break;
			case 18:
				$this->setNbVisite($value);
				break;
			case 19:
				$this->setIsPublic($value);
				break;
			case 20:
				$this->setCreatedAt($value);
				break;
			case 21:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = VideoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setType($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setSaisonId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNumero($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSagaId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setRealisateurId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setTitre($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSousTitre($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setTitreOriginal($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTitreClean($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAvertissement($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setResume($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setImage($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setBandeAnnonce($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setAnneeSortie($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setDuree($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setQualiteId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setVersionId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setNbVisite($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIsPublic($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCreatedAt($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setUpdatedAt($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(VideoPeer::DATABASE_NAME);

		if ($this->isColumnModified(VideoPeer::ID)) $criteria->add(VideoPeer::ID, $this->id);
		if ($this->isColumnModified(VideoPeer::TYPE)) $criteria->add(VideoPeer::TYPE, $this->type);
		if ($this->isColumnModified(VideoPeer::SAISON_ID)) $criteria->add(VideoPeer::SAISON_ID, $this->saison_id);
		if ($this->isColumnModified(VideoPeer::NUMERO)) $criteria->add(VideoPeer::NUMERO, $this->numero);
		if ($this->isColumnModified(VideoPeer::SAGA_ID)) $criteria->add(VideoPeer::SAGA_ID, $this->saga_id);
		if ($this->isColumnModified(VideoPeer::REALISATEUR_ID)) $criteria->add(VideoPeer::REALISATEUR_ID, $this->realisateur_id);
		if ($this->isColumnModified(VideoPeer::TITRE)) $criteria->add(VideoPeer::TITRE, $this->titre);
		if ($this->isColumnModified(VideoPeer::SOUS_TITRE)) $criteria->add(VideoPeer::SOUS_TITRE, $this->sous_titre);
		if ($this->isColumnModified(VideoPeer::TITRE_ORIGINAL)) $criteria->add(VideoPeer::TITRE_ORIGINAL, $this->titre_original);
		if ($this->isColumnModified(VideoPeer::TITRE_CLEAN)) $criteria->add(VideoPeer::TITRE_CLEAN, $this->titre_clean);
		if ($this->isColumnModified(VideoPeer::AVERTISSEMENT)) $criteria->add(VideoPeer::AVERTISSEMENT, $this->avertissement);
		if ($this->isColumnModified(VideoPeer::RESUME)) $criteria->add(VideoPeer::RESUME, $this->resume);
		if ($this->isColumnModified(VideoPeer::IMAGE)) $criteria->add(VideoPeer::IMAGE, $this->image);
		if ($this->isColumnModified(VideoPeer::BANDE_ANNONCE)) $criteria->add(VideoPeer::BANDE_ANNONCE, $this->bande_annonce);
		if ($this->isColumnModified(VideoPeer::ANNEE_SORTIE)) $criteria->add(VideoPeer::ANNEE_SORTIE, $this->annee_sortie);
		if ($this->isColumnModified(VideoPeer::DUREE)) $criteria->add(VideoPeer::DUREE, $this->duree);
		if ($this->isColumnModified(VideoPeer::QUALITE_ID)) $criteria->add(VideoPeer::QUALITE_ID, $this->qualite_id);
		if ($this->isColumnModified(VideoPeer::VERSION_ID)) $criteria->add(VideoPeer::VERSION_ID, $this->version_id);
		if ($this->isColumnModified(VideoPeer::NB_VISITE)) $criteria->add(VideoPeer::NB_VISITE, $this->nb_visite);
		if ($this->isColumnModified(VideoPeer::IS_PUBLIC)) $criteria->add(VideoPeer::IS_PUBLIC, $this->is_public);
		if ($this->isColumnModified(VideoPeer::CREATED_AT)) $criteria->add(VideoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(VideoPeer::UPDATED_AT)) $criteria->add(VideoPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(VideoPeer::DATABASE_NAME);

		$criteria->add(VideoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Video (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setType($this->type);

		$copyObj->setSaisonId($this->saison_id);

		$copyObj->setNumero($this->numero);

		$copyObj->setSagaId($this->saga_id);

		$copyObj->setRealisateurId($this->realisateur_id);

		$copyObj->setTitre($this->titre);

		$copyObj->setSousTitre($this->sous_titre);

		$copyObj->setTitreOriginal($this->titre_original);

		$copyObj->setTitreClean($this->titre_clean);

		$copyObj->setAvertissement($this->avertissement);

		$copyObj->setResume($this->resume);

		$copyObj->setImage($this->image);

		$copyObj->setBandeAnnonce($this->bande_annonce);

		$copyObj->setAnneeSortie($this->annee_sortie);

		$copyObj->setDuree($this->duree);

		$copyObj->setQualiteId($this->qualite_id);

		$copyObj->setVersionId($this->version_id);

		$copyObj->setNbVisite($this->nb_visite);

		$copyObj->setIsPublic($this->is_public);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getNotevideos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotevideo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActeurvideos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActeurvideo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCategorievideos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCategorievideo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMotsclevideos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMotsclevideo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotevideoadmins() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotevideoadmin($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVideoproprietaires() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVideoproprietaire($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Video Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     VideoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new VideoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Saison object.
	 *
	 * @param      Saison $v
	 * @return     Video The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSaison(Saison $v = null)
	{
		if ($v === null) {
			$this->setSaisonId(NULL);
		} else {
			$this->setSaisonId($v->getId());
		}

		$this->aSaison = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Saison object, it will not be re-added.
		if ($v !== null) {
			$v->addVideo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Saison object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Saison The associated Saison object.
	 * @throws     PropelException
	 */
	public function getSaison(PropelPDO $con = null)
	{
		if ($this->aSaison === null && ($this->saison_id !== null)) {
			$this->aSaison = SaisonPeer::retrieveByPk($this->saison_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSaison->addVideos($this);
			 */
		}
		return $this->aSaison;
	}

	/**
	 * Declares an association between this object and a Saga object.
	 *
	 * @param      Saga $v
	 * @return     Video The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSaga(Saga $v = null)
	{
		if ($v === null) {
			$this->setSagaId(NULL);
		} else {
			$this->setSagaId($v->getId());
		}

		$this->aSaga = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Saga object, it will not be re-added.
		if ($v !== null) {
			$v->addVideo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Saga object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Saga The associated Saga object.
	 * @throws     PropelException
	 */
	public function getSaga(PropelPDO $con = null)
	{
		if ($this->aSaga === null && ($this->saga_id !== null)) {
			$this->aSaga = SagaPeer::retrieveByPk($this->saga_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSaga->addVideos($this);
			 */
		}
		return $this->aSaga;
	}

	/**
	 * Declares an association between this object and a Personne object.
	 *
	 * @param      Personne $v
	 * @return     Video The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPersonne(Personne $v = null)
	{
		if ($v === null) {
			$this->setRealisateurId(NULL);
		} else {
			$this->setRealisateurId($v->getId());
		}

		$this->aPersonne = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Personne object, it will not be re-added.
		if ($v !== null) {
			$v->addVideo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Personne object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Personne The associated Personne object.
	 * @throws     PropelException
	 */
	public function getPersonne(PropelPDO $con = null)
	{
		if ($this->aPersonne === null && ($this->realisateur_id !== null)) {
			$this->aPersonne = PersonnePeer::retrieveByPk($this->realisateur_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPersonne->addVideos($this);
			 */
		}
		return $this->aPersonne;
	}

	/**
	 * Declares an association between this object and a Qualite object.
	 *
	 * @param      Qualite $v
	 * @return     Video The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setQualite(Qualite $v = null)
	{
		if ($v === null) {
			$this->setQualiteId(NULL);
		} else {
			$this->setQualiteId($v->getId());
		}

		$this->aQualite = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Qualite object, it will not be re-added.
		if ($v !== null) {
			$v->addVideo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Qualite object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Qualite The associated Qualite object.
	 * @throws     PropelException
	 */
	public function getQualite(PropelPDO $con = null)
	{
		if ($this->aQualite === null && ($this->qualite_id !== null)) {
			$this->aQualite = QualitePeer::retrieveByPk($this->qualite_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aQualite->addVideos($this);
			 */
		}
		return $this->aQualite;
	}

	/**
	 * Declares an association between this object and a Version object.
	 *
	 * @param      Version $v
	 * @return     Video The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVersion(Version $v = null)
	{
		if ($v === null) {
			$this->setVersionId(NULL);
		} else {
			$this->setVersionId($v->getId());
		}

		$this->aVersion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Version object, it will not be re-added.
		if ($v !== null) {
			$v->addVideo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Version object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Version The associated Version object.
	 * @throws     PropelException
	 */
	public function getVersion(PropelPDO $con = null)
	{
		if ($this->aVersion === null && ($this->version_id !== null)) {
			$this->aVersion = VersionPeer::retrieveByPk($this->version_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aVersion->addVideos($this);
			 */
		}
		return $this->aVersion;
	}

	/**
	 * Clears out the collNotevideos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotevideos()
	 */
	public function clearNotevideos()
	{
		$this->collNotevideos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotevideos collection (array).
	 *
	 * By default this just sets the collNotevideos collection to an empty array (like clearcollNotevideos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotevideos()
	{
		$this->collNotevideos = array();
	}

	/**
	 * Gets an array of Notevideo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Notevideos from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Notevideo[]
	 * @throws     PropelException
	 */
	public function getNotevideos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotevideos === null) {
			if ($this->isNew()) {
			   $this->collNotevideos = array();
			} else {

				$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

				NotevideoPeer::addSelectColumns($criteria);
				$this->collNotevideos = NotevideoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

				NotevideoPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotevideoCriteria) || !$this->lastNotevideoCriteria->equals($criteria)) {
					$this->collNotevideos = NotevideoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotevideoCriteria = $criteria;
		return $this->collNotevideos;
	}

	/**
	 * Returns the number of related Notevideo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Notevideo objects.
	 * @throws     PropelException
	 */
	public function countNotevideos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotevideos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

				$count = NotevideoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

				if (!isset($this->lastNotevideoCriteria) || !$this->lastNotevideoCriteria->equals($criteria)) {
					$count = NotevideoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotevideos);
				}
			} else {
				$count = count($this->collNotevideos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Notevideo object to this object
	 * through the Notevideo foreign key attribute.
	 *
	 * @param      Notevideo $l Notevideo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotevideo(Notevideo $l)
	{
		if ($this->collNotevideos === null) {
			$this->initNotevideos();
		}
		if (!in_array($l, $this->collNotevideos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotevideos, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Notevideos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getNotevideosJoinUtilisateur($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotevideos === null) {
			if ($this->isNew()) {
				$this->collNotevideos = array();
			} else {

				$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

				$this->collNotevideos = NotevideoPeer::doSelectJoinUtilisateur($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotevideoPeer::VIDEO_ID, $this->id);

			if (!isset($this->lastNotevideoCriteria) || !$this->lastNotevideoCriteria->equals($criteria)) {
				$this->collNotevideos = NotevideoPeer::doSelectJoinUtilisateur($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotevideoCriteria = $criteria;

		return $this->collNotevideos;
	}

	/**
	 * Clears out the collActeurvideos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActeurvideos()
	 */
	public function clearActeurvideos()
	{
		$this->collActeurvideos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActeurvideos collection (array).
	 *
	 * By default this just sets the collActeurvideos collection to an empty array (like clearcollActeurvideos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActeurvideos()
	{
		$this->collActeurvideos = array();
	}

	/**
	 * Gets an array of Acteurvideo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Acteurvideos from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Acteurvideo[]
	 * @throws     PropelException
	 */
	public function getActeurvideos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActeurvideos === null) {
			if ($this->isNew()) {
			   $this->collActeurvideos = array();
			} else {

				$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

				ActeurvideoPeer::addSelectColumns($criteria);
				$this->collActeurvideos = ActeurvideoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

				ActeurvideoPeer::addSelectColumns($criteria);
				if (!isset($this->lastActeurvideoCriteria) || !$this->lastActeurvideoCriteria->equals($criteria)) {
					$this->collActeurvideos = ActeurvideoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActeurvideoCriteria = $criteria;
		return $this->collActeurvideos;
	}

	/**
	 * Returns the number of related Acteurvideo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Acteurvideo objects.
	 * @throws     PropelException
	 */
	public function countActeurvideos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActeurvideos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

				$count = ActeurvideoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

				if (!isset($this->lastActeurvideoCriteria) || !$this->lastActeurvideoCriteria->equals($criteria)) {
					$count = ActeurvideoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collActeurvideos);
				}
			} else {
				$count = count($this->collActeurvideos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Acteurvideo object to this object
	 * through the Acteurvideo foreign key attribute.
	 *
	 * @param      Acteurvideo $l Acteurvideo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActeurvideo(Acteurvideo $l)
	{
		if ($this->collActeurvideos === null) {
			$this->initActeurvideos();
		}
		if (!in_array($l, $this->collActeurvideos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActeurvideos, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Acteurvideos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getActeurvideosJoinPersonne($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActeurvideos === null) {
			if ($this->isNew()) {
				$this->collActeurvideos = array();
			} else {

				$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

				$this->collActeurvideos = ActeurvideoPeer::doSelectJoinPersonne($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ActeurvideoPeer::VIDEO_ID, $this->id);

			if (!isset($this->lastActeurvideoCriteria) || !$this->lastActeurvideoCriteria->equals($criteria)) {
				$this->collActeurvideos = ActeurvideoPeer::doSelectJoinPersonne($criteria, $con, $join_behavior);
			}
		}
		$this->lastActeurvideoCriteria = $criteria;

		return $this->collActeurvideos;
	}

	/**
	 * Clears out the collCategorievideos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCategorievideos()
	 */
	public function clearCategorievideos()
	{
		$this->collCategorievideos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCategorievideos collection (array).
	 *
	 * By default this just sets the collCategorievideos collection to an empty array (like clearcollCategorievideos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCategorievideos()
	{
		$this->collCategorievideos = array();
	}

	/**
	 * Gets an array of Categorievideo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Categorievideos from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Categorievideo[]
	 * @throws     PropelException
	 */
	public function getCategorievideos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategorievideos === null) {
			if ($this->isNew()) {
			   $this->collCategorievideos = array();
			} else {

				$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

				CategorievideoPeer::addSelectColumns($criteria);
				$this->collCategorievideos = CategorievideoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

				CategorievideoPeer::addSelectColumns($criteria);
				if (!isset($this->lastCategorievideoCriteria) || !$this->lastCategorievideoCriteria->equals($criteria)) {
					$this->collCategorievideos = CategorievideoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCategorievideoCriteria = $criteria;
		return $this->collCategorievideos;
	}

	/**
	 * Returns the number of related Categorievideo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Categorievideo objects.
	 * @throws     PropelException
	 */
	public function countCategorievideos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCategorievideos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

				$count = CategorievideoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

				if (!isset($this->lastCategorievideoCriteria) || !$this->lastCategorievideoCriteria->equals($criteria)) {
					$count = CategorievideoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCategorievideos);
				}
			} else {
				$count = count($this->collCategorievideos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Categorievideo object to this object
	 * through the Categorievideo foreign key attribute.
	 *
	 * @param      Categorievideo $l Categorievideo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCategorievideo(Categorievideo $l)
	{
		if ($this->collCategorievideos === null) {
			$this->initCategorievideos();
		}
		if (!in_array($l, $this->collCategorievideos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCategorievideos, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Categorievideos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getCategorievideosJoinCategorie($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCategorievideos === null) {
			if ($this->isNew()) {
				$this->collCategorievideos = array();
			} else {

				$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

				$this->collCategorievideos = CategorievideoPeer::doSelectJoinCategorie($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CategorievideoPeer::VIDEO_ID, $this->id);

			if (!isset($this->lastCategorievideoCriteria) || !$this->lastCategorievideoCriteria->equals($criteria)) {
				$this->collCategorievideos = CategorievideoPeer::doSelectJoinCategorie($criteria, $con, $join_behavior);
			}
		}
		$this->lastCategorievideoCriteria = $criteria;

		return $this->collCategorievideos;
	}

	/**
	 * Clears out the collMotsclevideos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMotsclevideos()
	 */
	public function clearMotsclevideos()
	{
		$this->collMotsclevideos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMotsclevideos collection (array).
	 *
	 * By default this just sets the collMotsclevideos collection to an empty array (like clearcollMotsclevideos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMotsclevideos()
	{
		$this->collMotsclevideos = array();
	}

	/**
	 * Gets an array of Motsclevideo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Motsclevideos from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Motsclevideo[]
	 * @throws     PropelException
	 */
	public function getMotsclevideos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMotsclevideos === null) {
			if ($this->isNew()) {
			   $this->collMotsclevideos = array();
			} else {

				$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

				MotsclevideoPeer::addSelectColumns($criteria);
				$this->collMotsclevideos = MotsclevideoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

				MotsclevideoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMotsclevideoCriteria) || !$this->lastMotsclevideoCriteria->equals($criteria)) {
					$this->collMotsclevideos = MotsclevideoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMotsclevideoCriteria = $criteria;
		return $this->collMotsclevideos;
	}

	/**
	 * Returns the number of related Motsclevideo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Motsclevideo objects.
	 * @throws     PropelException
	 */
	public function countMotsclevideos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMotsclevideos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

				$count = MotsclevideoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

				if (!isset($this->lastMotsclevideoCriteria) || !$this->lastMotsclevideoCriteria->equals($criteria)) {
					$count = MotsclevideoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collMotsclevideos);
				}
			} else {
				$count = count($this->collMotsclevideos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Motsclevideo object to this object
	 * through the Motsclevideo foreign key attribute.
	 *
	 * @param      Motsclevideo $l Motsclevideo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMotsclevideo(Motsclevideo $l)
	{
		if ($this->collMotsclevideos === null) {
			$this->initMotsclevideos();
		}
		if (!in_array($l, $this->collMotsclevideos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMotsclevideos, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Motsclevideos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getMotsclevideosJoinMotscle($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMotsclevideos === null) {
			if ($this->isNew()) {
				$this->collMotsclevideos = array();
			} else {

				$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

				$this->collMotsclevideos = MotsclevideoPeer::doSelectJoinMotscle($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MotsclevideoPeer::VIDEO_ID, $this->id);

			if (!isset($this->lastMotsclevideoCriteria) || !$this->lastMotsclevideoCriteria->equals($criteria)) {
				$this->collMotsclevideos = MotsclevideoPeer::doSelectJoinMotscle($criteria, $con, $join_behavior);
			}
		}
		$this->lastMotsclevideoCriteria = $criteria;

		return $this->collMotsclevideos;
	}

	/**
	 * Clears out the collNotevideoadmins collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotevideoadmins()
	 */
	public function clearNotevideoadmins()
	{
		$this->collNotevideoadmins = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotevideoadmins collection (array).
	 *
	 * By default this just sets the collNotevideoadmins collection to an empty array (like clearcollNotevideoadmins());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotevideoadmins()
	{
		$this->collNotevideoadmins = array();
	}

	/**
	 * Gets an array of Notevideoadmin objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Notevideoadmins from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Notevideoadmin[]
	 * @throws     PropelException
	 */
	public function getNotevideoadmins($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotevideoadmins === null) {
			if ($this->isNew()) {
			   $this->collNotevideoadmins = array();
			} else {

				$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

				NotevideoadminPeer::addSelectColumns($criteria);
				$this->collNotevideoadmins = NotevideoadminPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

				NotevideoadminPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotevideoadminCriteria) || !$this->lastNotevideoadminCriteria->equals($criteria)) {
					$this->collNotevideoadmins = NotevideoadminPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotevideoadminCriteria = $criteria;
		return $this->collNotevideoadmins;
	}

	/**
	 * Returns the number of related Notevideoadmin objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Notevideoadmin objects.
	 * @throws     PropelException
	 */
	public function countNotevideoadmins(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotevideoadmins === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

				$count = NotevideoadminPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

				if (!isset($this->lastNotevideoadminCriteria) || !$this->lastNotevideoadminCriteria->equals($criteria)) {
					$count = NotevideoadminPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotevideoadmins);
				}
			} else {
				$count = count($this->collNotevideoadmins);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Notevideoadmin object to this object
	 * through the Notevideoadmin foreign key attribute.
	 *
	 * @param      Notevideoadmin $l Notevideoadmin
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotevideoadmin(Notevideoadmin $l)
	{
		if ($this->collNotevideoadmins === null) {
			$this->initNotevideoadmins();
		}
		if (!in_array($l, $this->collNotevideoadmins, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotevideoadmins, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Notevideoadmins from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getNotevideoadminsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotevideoadmins === null) {
			if ($this->isNew()) {
				$this->collNotevideoadmins = array();
			} else {

				$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

				$this->collNotevideoadmins = NotevideoadminPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(NotevideoadminPeer::VIDEO_ID, $this->id);

			if (!isset($this->lastNotevideoadminCriteria) || !$this->lastNotevideoadminCriteria->equals($criteria)) {
				$this->collNotevideoadmins = NotevideoadminPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastNotevideoadminCriteria = $criteria;

		return $this->collNotevideoadmins;
	}

	/**
	 * Clears out the collVideoproprietaires collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVideoproprietaires()
	 */
	public function clearVideoproprietaires()
	{
		$this->collVideoproprietaires = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVideoproprietaires collection (array).
	 *
	 * By default this just sets the collVideoproprietaires collection to an empty array (like clearcollVideoproprietaires());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVideoproprietaires()
	{
		$this->collVideoproprietaires = array();
	}

	/**
	 * Gets an array of Videoproprietaire objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Video has previously been saved, it will retrieve
	 * related Videoproprietaires from storage. If this Video is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Videoproprietaire[]
	 * @throws     PropelException
	 */
	public function getVideoproprietaires($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVideoproprietaires === null) {
			if ($this->isNew()) {
			   $this->collVideoproprietaires = array();
			} else {

				$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

				VideoproprietairePeer::addSelectColumns($criteria);
				$this->collVideoproprietaires = VideoproprietairePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

				VideoproprietairePeer::addSelectColumns($criteria);
				if (!isset($this->lastVideoproprietaireCriteria) || !$this->lastVideoproprietaireCriteria->equals($criteria)) {
					$this->collVideoproprietaires = VideoproprietairePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVideoproprietaireCriteria = $criteria;
		return $this->collVideoproprietaires;
	}

	/**
	 * Returns the number of related Videoproprietaire objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Videoproprietaire objects.
	 * @throws     PropelException
	 */
	public function countVideoproprietaires(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVideoproprietaires === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

				$count = VideoproprietairePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

				if (!isset($this->lastVideoproprietaireCriteria) || !$this->lastVideoproprietaireCriteria->equals($criteria)) {
					$count = VideoproprietairePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collVideoproprietaires);
				}
			} else {
				$count = count($this->collVideoproprietaires);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Videoproprietaire object to this object
	 * through the Videoproprietaire foreign key attribute.
	 *
	 * @param      Videoproprietaire $l Videoproprietaire
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVideoproprietaire(Videoproprietaire $l)
	{
		if ($this->collVideoproprietaires === null) {
			$this->initVideoproprietaires();
		}
		if (!in_array($l, $this->collVideoproprietaires, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVideoproprietaires, $l);
			$l->setVideo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Video is new, it will return
	 * an empty collection; or if this Video has previously
	 * been saved, it will retrieve related Videoproprietaires from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Video.
	 */
	public function getVideoproprietairesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VideoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVideoproprietaires === null) {
			if ($this->isNew()) {
				$this->collVideoproprietaires = array();
			} else {

				$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

				$this->collVideoproprietaires = VideoproprietairePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(VideoproprietairePeer::VIDEO_ID, $this->id);

			if (!isset($this->lastVideoproprietaireCriteria) || !$this->lastVideoproprietaireCriteria->equals($criteria)) {
				$this->collVideoproprietaires = VideoproprietairePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastVideoproprietaireCriteria = $criteria;

		return $this->collVideoproprietaires;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collNotevideos) {
				foreach ((array) $this->collNotevideos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActeurvideos) {
				foreach ((array) $this->collActeurvideos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCategorievideos) {
				foreach ((array) $this->collCategorievideos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMotsclevideos) {
				foreach ((array) $this->collMotsclevideos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotevideoadmins) {
				foreach ((array) $this->collNotevideoadmins as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVideoproprietaires) {
				foreach ((array) $this->collVideoproprietaires as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collNotevideos = null;
		$this->collActeurvideos = null;
		$this->collCategorievideos = null;
		$this->collMotsclevideos = null;
		$this->collNotevideoadmins = null;
		$this->collVideoproprietaires = null;
			$this->aSaison = null;
			$this->aSaga = null;
			$this->aPersonne = null;
			$this->aQualite = null;
			$this->aVersion = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseVideo:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseVideo::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseVideo
