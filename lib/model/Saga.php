<?php


/**
 * Skeleton subclass for representing a row from the 'saga' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * 12/04/10 09:58:02
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Saga extends BaseSaga {
  public function __toString()
  {
    return sprintf('%s', $this->getTitre());
  }

  public function getImage($pro)
  {
    foreach($this->getFilms($pro) as $i => $film){
        if($i==0){
            $image=$film->getImage();
        }
    }
    return $image;
  }
  
  public function getFilms($pro)
  {
	$criteria = new Criteria();
	if($pro){
		$criteria->addJoin(VideoproprietairePeer::VIDEO_ID,VideoPeer::ID, Criteria::LEFT_JOIN);
		$criteria->add(VideoproprietairePeer::UTILISATEUR_ID, $pro->getId());
	}
	$criteria->addAscendingOrderByColumn(VideoPeer::TITRE);
    return parent::getVideos($criteria);
  }
  
	

  public function getResume($pro)
  {
    foreach($this->getFilms($pro) as $i => $film){
        if($i==0){
            $resume=$film->getResume();
        }
    }
    return $resume;
  }

    public function getExtraitResume($pro,$lg_max=400)
  {
    foreach($this->getFilms($pro) as $i => $film){
        if($i==0){
            $extraitresume=$film->getExtraitResume($lg_max);
        }
    }
    return $extraitresume;
  }

  public function getResteResume($pro,$lg_max=40)
  {
    foreach($this->getFilms($pro) as $i => $film){
        if($i==0){
            $resteresume=$film->getResteResume($lg_max);
        }
    }
    return $resteresume;
  }

  /*
  public function getActeurs()
  {
    foreach($this->getFilms() as $i => $film){
        foreach($film->getActeurs() as $j => $acteur){
            $act[$i][]=$acteur;
        }
        if($i!=0){
            $acteurs=array_intersect_assoc($act[$i],$act[$i-1]);
            $act[$i]=$acteurs;
        }else{
            $acteurs= $act[$i];
        }
    }
    return $acteurs;
  }
  */
    public function getActeurs($pro,$nb=0)
  {
    foreach($this->getFilms($pro) as $i => $film){
			foreach($film->getActeurs() as $j => $acteur){
				$act[$i][]=$acteur;
			}
			if($i!=0){
				$acteursTest=array_intersect($act[$i],$acteurs);
				$acteurs=$acteursTest;
			}else{
				$acteurs= $act[$i];
			}
		
    }
	if(sizeof($acteurs)>$nb){
		for($z=sizeof($acteurs);$z>=$nb;$z--){
			unset($acteurs[$z]);
		}
	}
    return $acteurs;
  }
  
  public function getProprietaires($pro)
  {
	$proprios=Array();
	$fini = false;
    foreach($this->getFilms($pro) as $i => $film){
		if(!$fini){
			foreach($film->getProprietaires() as $j => $admin){
				if(!in_array($admin,$proprios)){
					$proprios[]=$admin;
				}
			}
		}
		
    }
    return $proprios;
  }
  
  public function getNoteMoyenne($pro){
		$noteSomme=0;
		$nb=0;
		foreach($this->getFilms($pro) as $i => $film){
			foreach($film->getNotevideoadmins() as $note){
				$noteSomme+=$note->getNote();
				$nb++;
			}
		}
		$moyenne = 0;
		if($nb!=0){
			$moyenne=$noteSomme/$nb;
		}
        return $moyenne;
  }



  

} // Saga
